#!/bin/bash

# Generate changelog file.
#
# This is suitable for a changelog file in markdown/text or html format.
#
# Options:
#
#
# --since=yyyy-mm-dd
#   This is the same as the one for git log.
#
# --html
#   Generate changelog in html.
#
# --author
#   Add commit author to changelog.
#
# Examples
#
# git changelog > myChangeLog.markdown
# git changelog --html > myChangeLog.html
# git changelog --since=2020-07-010
# git changelog --since=2.weeks
# git changelog --since=2.weeks --html
# git changelog --author
# git changelog --author --html


initChangeLog()
{
	since='empty'
	format='mardown'
	authorValue='empty'

	# split date if --since
	if [[ $1 = --since* ]]
	then
		since=$1
	elif [[ $2 = --since* ]]
	then
		since=$2
	elif [[ $3 = --since* ]]
	then
		since=$3
	fi

	# veirfy is markdown or html
	if [[ $1 = --html ]] || [[ $2 = --html ]] || [[ $3 = --html ]]
	then
		format=html
	fi

	# veirfy is markdown or html
	if [[ $1 = --author ]] || [[ $2 = --author ]] || [[ $3 = --author ]]
	then
		authorValue=author
	fi

	getLog $since $format $authorValue
}

getLog()
{
	if [[ $1 = empty ]]
	then
		since=''
	fi

	if [[ $2 = html ]] && [[ $3 = author ]]
	then
		getLogHtmlAuthor $since
	elif [[ $2 = html ]]
	then
		getLogHtml $since
	elif [[ $3 = author ]]
	then
		getLogMarkdownAuthor $since
	else
		getLogMarkdown $since
	fi
}

getLogMarkdown()
{
	log=$(git log --pretty=format:'- %ad %s  %n%b' --date=short $1)
}

getLogMarkdownAuthor()
{
	log=$(git log --pretty=format:'- %ad %s  %n%b (%an <[%ae](mailto:%ae)>)%n' --date=short $1)
}
getLogHtmlAuthor()
{
	log=$(git log --pretty=format:'-<li>%ad %s%n%b (%an <i><a href='mailto:%ae'>%ae</a></i>)</li>%n' --date=short $1)
	log="<br />+$log"
}
getLogHtml()
{
	log=$(git log --pretty=format:'-<li>%ad %s%n%b</li>' --date=short $1)
	log="<br />+$log"
}

# TODO complet function
isTitle()
{
echo "Title function is not implement yet ....."
#	str=''
#	if [[format = html]]
#	then
#		str= $($str| tail -c4)
#		str = "\n" + str + "\n" + "=" * str.size
	#else
	#	str=str[1..4] + "<h2>" + $($str| tail -c6) + "</h2>"
 #	fi
}

# TODO complet function
formattingString()
{
echo "Title function is not implement yet ....."
}


splitter(){
str=$1
delimiter=--since=
s=$str$delimiter
array=();
while [[ $s ]]; do
    array+=( "${s%%"$delimiter"*}" );
    s=${s#*"$delimiter"};
done;
since="${array[1]}"
}

# TODO
formatTitle()
{
	echo "not impl"
}

# Return true is string is commit body
function updateCommitBodyWhenIsHtmlGenerator()
{
	if [[ $format = html ]] && ! [[ "$1" = *\<\/li\> ]]
	then
		echo "<br />$@"
	else
		echo "$@"
	fi
}

# TODO complet this function
function fetchVersion()
{
	if [[ $format = html ]]
	then
		echo $@
	else
		echo $@
	fi
}


###
# Main body of script starts here
###
echo "Start of script..."
echo "See https://github.com/marouaneaba/git-changelog for inforamtion."
echo "This change log is auto-generated, use git-changelog."
echo "Please (checkout) to branch generate changelog."
echo ""
echo ""
echo ""


initChangeLog $@
if [[ $format = html ]]
then
	echo "<ul>"
fi

#echo "$log"
#logs=(${log//\\n/ })
logs=();
logs=${log%'\n'*}
#declare -p logs
#echo "${logs[1]}"

delimiter='
'

s=$log$delimiter
logs=();
while [[ $s ]]; do
    logs+=( "${s%%"$delimiter"*}" );
    s=${s#*"$delimiter"};
done;
#declare -p logs

tmp=''
for line in "${logs[@]}"
do
	# verify is commit body
	if [[ $line = -* ]]
	then
		tmp=$(updateCommitBodyWhenIsHtmlGenerator $line)
	elif [[ $line =~ \-( |<li>).{10}  ]]
	then
		#tmp=$(fetchVersion $line)
		echo $line
	else
		tmp=$line
	fi
	echo $tmp
done

echo "End of script..."
